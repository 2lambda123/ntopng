{#
    (C) 2021 - ntop.org    
#}

<script type="text/javascript" src="/js/Chart.bundle.min.js"></script>
<script type='text/javascript' src='/js/widgets/widgets.js?{{ ntop.getStaticFileEpoch() }}'></script>

<div class='row'>
    <div class='col-12'>
        <div class="d-flex p-2 mb-2 navbar-shadow border-radius navbar-light bg-light align-items-center">
            {* ui_utils.render_datetime_range_picker(range_picker) *}
        </div>
    </div>
    <div class="col-12">
        <div class="card card-shadow mt-2">
            <div class="card-body">
                {* chart.html *}
            </div>
        </div>
    </div>
    <div class='col-12 mt-2'>
        <div class="card card-shadow">
            <div class="card-body">
                <table id='{{ datatable.name }}' class='table table-striped table-bordered w-100'> 
                    <thead>
                        <tr>
                            {% for _, column in ipairs(datatable.columns) do %}
                                <th>{{ column }}</th>
                            {% end %}
                        </tr>
                    </thead>
                </table>
                <small id="{{ datatable.name }}-query" style="display: none;" class="query">Query performed in <span class="seconds">{}</span> seconds.</small>
            </div>
        </div>
    </div>
</div>

{% if datatable.modals then %}
<div class="modals">
    {% for _, modal in ipairs(datatable.modals) do %}
        {* modal *}
    {% end %}
</div>
{% end %}

<link href="{{ ntop.getHttpPrefix() }}/datatables/datatables.min.css" rel="stylesheet"/>
<script type="text/javascript">
    i18n.showing_x_to_y_rows = "{{ i18n('showing_x_to_y_rows', {x='_START_', y='_END_', tot='_TOTAL_'}) }}";
</script>
<script type='text/javascript'>
    $(document).ready(function(){

        const chart = WidgetUtils.getWidgetByName("{{ chart.name }}");

        async function reloadChartAndTable($table, begin, end, rows) {
            if (begin != null && end != null) {
                // reload the table
                $table.ajax.url(`{* datatable.datasource.name *}?begin_epoch=${begin.unix()}&end_epoch=${end.unix()}&totalRows=${rows}`).load();
                // reload the chart
                await chart.update({begin_epoch: begin.unix(), end_epoch: end.unix(), totalRows: rows});
            }
        }

        function printQueryTime($table) {
            const response = $table.ajax.json();
            // if the response contains the query time period
            if (response.rsp.time !== undefined) {
                $(`#{{ datatable.name }}-query`).show();
                $(`#{{ datatable.name }}-query .seconds`).text(response.rsp.time);
            }
        }

        function getTimestampRange() {
            const begin = $(`#begin-epoch`).datetimepicker('date');
            const end = $(`#end-epoch`).datetimepicker('date');
            return [begin, end];
        }

        function pushNewHistoryState(begin, end, len) {
            const url = new URL(location);
            url.searchParams.set('begin_epoch', begin.unix());
            url.searchParams.set('end_epoch', end.unix());
            url.searchParams.set('totalRows', len);
            window.history.pushState({begin_epoch: begin.unix(), end_epoch: end.unix(), totalRows: len}, '', url);
        }

        async function onRangePickerChange(pushHistroy = false) {
            
            const [begin, end] = getTimestampRange();
            const len = parseInt($(`#select-len`).val());
            await reloadChartAndTable($table, begin, end, len);

            if (pushHistroy) {
                pushNewHistoryState(begin, end, len);
            }

        }
        
        const datatableButton = {* (datatable.buttons or '[]') *};
        datatableButton.push({
            text: '<i class="fas fa-sync"></i>',
            action: async function (e, dt, node, config) {
                await onRangePickerChange();
            }
        });

        let config = DataTableUtils.getStdDatatableConfig(datatableButton);
        config = DataTableUtils.setAjaxConfig(config, `{* datatable.datasource.endpoint *}`, 'rsp.records');
        config = DataTableUtils.extendConfig(config, {
            {% if datatable.js_columns then %}
                columns: {* datatable.js_columns *}
            {% end %}
        });

        const $table = $(`#{{ datatable.name }}`).DataTable(config);
        // on ajax request complete then print the query time
        $table.on('xhr', function() { printQueryTime($table); });

        // on apply button click
        $(`#btn-apply`).on('click', async function() {
            await onRangePickerChange(true);
        });

        $(`#select-len`).on('change', async function() {
            await onRangePickerChange(true);
        });
      
    });
</script>