{#
    (C) 2021 - ntop.org    
#}

{%
    -- if there are set the _GET["epoch_begin"] && _GET["epoch_end"]
    -- then select the `Custom` Label 
    local presetSelected = (isEmptyString(_GET["epoch_begin"]) and isEmptyString(_GET["epoch_end"]))
%}

<link rel="stylesheet" href="{{ ntop.getHttpPrefix }}/css/tagify.css" />
<style>
.tagify__input {
  min-width: 175px;
}
.tagify__tag {
  white-space: nowrap;
  margin: 3px 0px 5px 5px;
}
.tagify__tag select.operator {
  margin: 0px 4px;
  border: 1px solid #c4c4c4;
  border-radius: 4px;
}
.tagify__tag b.operator {
  margin: 0px 4px;
  background-color: white;
  border: 1px solid #c4c4c4;
  border-radius: 4px;
  padding: 0.05em 0.2em;
}
.tagify__tag > div {
  display: flex;
  align-items: center;
}
</style>

<div class="w-100">

    <div class="range-container d-flex flex-wrap">
    
        {% if not isEmptyString(extra_range_buttons) then %}
            {* extra_range_buttons *}
        {% end %}

        <div class="range-picker d-flex my-auto flex-wrap">

            {% if query_presets ~= nil and query_presets ~= {} then %}
            <div class="form-group my-auto mx-1">
                <select class="form-select" id="select-query-presets">
                    {% if query_presets_subtype == "tables" then %}
                    <option value="">{{ i18n('queries.raw_flows') }}</option>
                    <optgroup label="{{ i18n('queries.queries') }}">
                    {% end %}
                       {% for id, preset in pairsByKeys(query_presets) do %}
                       <option {{ preset.selected and 'selected' }} value="{{ id }}">{{ preset.i18n_name and i18n(preset.i18n_name) or preset.name }}</option>      
                       {% end %}
                    {% if query_presets_subtype == "tables" then %}
                    </optgroup>
                    {% end %}
                </select>
            </div>   
            {% end %}

            <div class="form-group my-auto mx-1">
                <select class="form-select" id="select-time-presets">
                    {% if (presets.five_mins) or (presets.five_mins ~= false) then %}
                    <option {{ ((presetSelected and default == '5min') and 'selected' or '') }} value="5,minutes">{{ i18n('show_alerts.presets.5_min') }}</option>
                    {% end  %}
                    
                    <option {{ ((presetSelected and default == '30min') and 'selected' or '') }} value="30,minutes">{{ i18n('show_alerts.presets.30_min') }}</option>
                    
                    <option {{ ((presetSelected and default == '1hour') and 'selected' or '') }} value="1,hours">{{ i18n('show_alerts.presets.hour') }}</option>
                    
                    {% if (presets.day == nil) or presets.day then %}
                    <option {{ ((presetSelected and default == '1day') and 'selected' or '') }} value="1,days">{{ i18n('show_alerts.presets.day') }}</option>
                    {% end  %}
                    
                    {% if (presets.week == nil) or presets.week then %}
                    <option {{ ((presetSelected and default == '1week') and 'selected' or '') }} value="1,weeks">{{ i18n('show_alerts.presets.week') }}</option>
                    {% end  %}
                    
                    {% if (presets.month == nil) or presets.month then %}
                    <option value="1,months">{{ i18n('show_alerts.presets.month') }}</option>
                    {% end  %}
                    
                    {% if (presets.year == nil) or presets.year then %}
                    <option value="1,years">{{ i18n('show_alerts.presets.year') }}</option>
                    {% end  %}

                    <option {{ ((presetSelected and default == 'all') and 'selected' or '') }} value="{{ (earliest_available_epoch or 0) }}">{{ i18n('show_alerts.presets.all') }}</option>
                    
                    <option value="custom" disabled {{ not presetSelected and 'selected' or '' }}>{{ i18n("graphs.custom") }}</option>
                </select>
            </div>

            <div style="width: 30rem;" class="input-group mx-1">
		    <span class="input-group-text">
		        <i class="fas fa-calendar-alt"></i>
		    </span>
                <input id='begin-epoch' type="text" aria-label="Begin" data-toggle="datetimepicker" class="form-control time-input datetimepicker-input border-right-0" data-target="#begin-epoch">
                    <span class="input-group-text">
                        <i class="fas fa-long-arrow-alt-right"></i>
                    </span>
                <input id='end-epoch' type="text" aria-label="End" data-toggle="datetimepicker" class="form-control time-input datetimepicker-input border-left-0" data-target="#end-epoch">
            </div>

            <span class="wrong-ranger invalid-feedback mx-1 my-auto" data-bs-toggle="tooltip" data-placement="bottom" title="{{ i18n('wrong_date_range') }}" style="width: 1rem; display: none;">
                <i class="fas fa-exclamation-circle"></i>
            </span>

    
            <div class="controls d-flex flex-wrap">
                <div class="btn-group me-auto btn-group-sm">
                    <button class="btn btn-link" id="btn-jump-time-back">
                        <i class="fas fa-long-arrow-alt-left"></i>
                    </button>
                    <button class="btn btn-link me-2" disabled id="btn-jump-time-ahead">
                        <i class="fas fa-long-arrow-alt-right"></i>
                    </button>
                    <button class="btn btn-link" id="btn-zoom-in">
                        <i class="fas fa-search-plus"></i>
                    </button>
                    <button class="btn btn-link" id="btn-zoom-out">
                        <i class="fas fa-search-minus"></i>
                    </button>
                </div>
            </div>
        </div>
    
        <button id="btn-apply" class="btn btn-sm btn-primary m-auto ms-1">{{ i18n("apply") }}</button>
    {% if (show_jump) then %}
        <div class="form-group my-auto mx-1">
            <a href="{{ jump_endpoint }}" class="btn btn-sm btn-primary ms-auto"><i class="fas fa-filter"></i> {{ show_jump_text or i18n("jump_to_table") }}</a>
        </div>
    {% end %}

    {% if (show_auto_refresh) then %}
        <div class="form-group my-auto mx-1">
            <button class="btn btn-link" id="autoRefreshEnabled" style="box-shadow: none;"><i class="fas fa-sync-alt {{ refresh_enabled }}"></i></button>
        </div>
    {% end %}
    </div>
    

    {% if tags.enabled then %}
    <div class="d-flex mt-1">
    {% else %}
    <div class="d-none mt-1">
    {% end %}

        <input class="w-100 form-control h-auto" name="tags" placeholder="{{ i18n('show_alerts.filters') }}">

        {% if not isEmptyString(extra_tags_buttons) then %}
            {* extra_tags_buttons *}
        {% end %}

        <button data-bs-toggle="tooltip" data-placement="bottom" title="{{ i18n('show_alerts.remove_filters') }}" class="btn ms-1 my-auto btn-sm btn-remove-tags">
            <i class="fas fa-times"></i>
        </button>
    </div>

</div>
  

<script type="text/javascript" src="{{ ntop.getHttpPrefix }}/js/tagify.min.js"></script>
<script type="text/javascript">

/* Tags definitions */
i18n.tags = {* json.encode(tags.localization) *};
const TAG_OPERATORS = {* json.encode(tags.tag_operators) *};
const DEFINED_TAGS = {* json.encode(tags.defined_tags) *};
const VIEW_ONLY_TAGS = {* tags.view_only *};

/* Initial Tags */
const initialTags =  {* json.encode(tags.values) *};

/* Parameters */
const beginEpoch = {{ (epoch_begin or _GET['epoch_begin'] or 'undefined') }};
const endEpoch = {{ (epoch_end or _GET['epoch_end'] or 'undefined') }};
const datasourceParams = {* json.encode(datasource_params) *};

let pageHandle = {};
const input = $(`[name='tags']`)[0];

{% if query_presets ~= nil and query_presets ~= {} then %}
let currentQueryPresets = $(`#select-query-presets`).val();
{% end %}

const tagify = new Tagify(input, {
    duplicates: true,
    delimiters : null,
    dropdown : {
        enabled: 1, // suggest tags after a single character input
        classname : 'extra-properties' // custom class for the suggestions dropdown
    },
    autoComplete: { enabled: false },
    templates : {
        tag : function(tagData){
            try{
                return `<tag title='${tagData.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${tagData.class ? tagData.class : ""}' ${this.getAttributes(tagData)}>
                        <x title='remove tag' class='tagify__tag__removeBtn'></x>
                        <div>
                            ${tagData.label ? `<b>${tagData.label}</b>&nbsp;` : ``}
                            ${!VIEW_ONLY_TAGS && tagData.operators ? `<select class='operator'>${tagData.operators.map(op => `<option ${tagData.selectedOperator === op ? 'selected' : ''} value='${op}'>${TAG_OPERATORS[op]}</option>`).join()}</select>` : `<b class='operator'>${tagData.selectedOperator ? TAG_OPERATORS[tagData.selectedOperator] : '='}</b>`}&nbsp;
                            <span class='tagify__tag-text'>${tagData.value}</span>
                        </div>
                    </tag>`
            }
            catch(err){
                console.error(`An error occured when creating a new tag: ${err}`);
            }
        },
    },
    validate: function(tagData) {
       return (typeof tagData.key !== 'undefined' &&
               typeof tagData.selectedOperator !== 'undefined' &&
               typeof tagData.value !== 'undefined');
    }
});

$(document).ready(function() {

    // add existing tags
    tagify.addTags(initialTags);

    // intialize tooltip
    $(`.btn-remove-tags`).tooltip();

    const rangepickerEvent = new Event('change');

    const MAX_ZOOM_IN = {{ (max_delta_in) }}; // 5 minutes
    const MAX_ZOOM_OUT = {{ (max_delta_out) }}; // 12 hours

    const now = (endEpoch === undefined) ? moment() : moment(endEpoch, 'X');
    const prev = (beginEpoch === undefined) ? moment().subtract({{ (default == '30min' and '30' or '10080') }}, 'minutes') : moment(beginEpoch, 'X');

    const $rangePicker = $(`.range-picker`)[0];
    const $inputBeginEpoch = $(`#begin-epoch`);
    const $inputEndEpoch = $(`#end-epoch`);

    const $btnApply = $(`#btn-apply`);
    const $btnJumpTimeBack = $(`#btn-jump-time-back`);
    const $btnJumpTimeAhead = $(`#btn-jump-time-ahead`);
    const $btnZoomIn = $(`#btn-zoom-in`);
    const $btnZoomOut = $(`#btn-zoom-out`);

    const $selectTimePresets = $(`#select-time-presets`);

    function calculateHalfZoomIn() {
        const begin = $inputBeginEpoch.datetimepicker('date');
        const end = $inputEndEpoch.datetimepicker('date');

        const delta = end.unix() - begin.unix();
        const zoomIn = delta / 3;
        const halfZoomIn = (zoomIn) / 2;
        return [begin, end, delta, halfZoomIn];
    }

    function highlightCustomPresetButton() {
        $(`#select-time-presets`).val('custom');
    }

    function disableRangePickerButtons() {
        $('.controls button').attr('disabled', 'disabled');
    }

    function enableRangePickerButtons() {
        $('.controls button').removeAttr('disabled');
    }

    function highlightWrongDate() {
        $(`.range-picker .input-group`).addClass('border').addClass('rounded').addClass('border-danger');
        $(`.wrong-ranger`).show();
    }

    function disableWrongDate() {
        $(`.range-picker .input-group`).removeClass('border').removeClass('rounded').removeClass('border-danger');
        $(`.wrong-ranger`).hide();
    }

    function updateRangePicker(operation, maxDate) {

        // get the selected preset or the first prest available
        const [delta, measure] = ($selectTimePresets.val() || $(`#select-time-presets option:first`).val()).split(',');
        const begin = $inputBeginEpoch.datetimepicker('date');
        const end = $inputEndEpoch.datetimepicker('date');

        $inputEndEpoch.datetimepicker('date', end[operation](parseInt(delta), measure));
        $inputBeginEpoch.datetimepicker('date', begin[operation](parseInt(delta), measure));

        // if the new end time is less than the max current date then
        // enable the jump time ahead button, otherwise disable it
        if (end < maxDate) {
            $btnJumpTimeAhead.removeClass('disabled');
        }
        else {
            $btnJumpTimeAhead.addClass('disabled');
        }

        $rangePicker.dispatchEvent(rangepickerEvent);
    }

    $('[data-bs-toggle="tooltip"]').tooltip();

    // initialize timepickers
    $inputBeginEpoch.datetimepicker({format: 'DD/MM/YYYY HH:mm:ss', useCurrent: false});
    $inputEndEpoch.datetimepicker({format: 'DD/MM/YYYY HH:mm:ss', useCurrent: false});
    $inputBeginEpoch.datetimepicker('date', prev);
    $inputEndEpoch.datetimepicker('date', now);

    $selectTimePresets.on('change', function(e) {

        // remove the active class
        const [subtract, measure] = $(this).val().split(',');

        const now = moment();
        let diff = moment().subtract(parseInt(subtract), measure);

        if(!measure)
            diff = moment(parseInt(subtract) * 1000);

        $inputEndEpoch.datetimepicker('minDate', diff);
        $inputEndEpoch.datetimepicker('maxDate', now);

        $inputEndEpoch.datetimepicker('date', now);
        $inputBeginEpoch.datetimepicker('date', diff);

    });

    // travel back in the past by the selected preset
    $btnJumpTimeBack.on('click', () => {updateRangePicker('subtract', now)});
    // travel ahead in the future by the selected preset
    $btnJumpTimeAhead.on('click', () => {updateRangePicker('add', now)});

    $btnZoomIn.on('click', function() {

        const [begin, end, delta, halfZoomIn] = calculateHalfZoomIn();

        const newBegin = moment(begin.unix() + halfZoomIn, 'X');
        const newEnd = moment(end.unix() - halfZoomIn, 'X');

        $inputBeginEpoch.datetimepicker('date', newBegin);
        $inputEndEpoch.datetimepicker('date', newEnd);

        // if delta is lower than 5 minutes then disable the zoom in button
        if (delta < MAX_ZOOM_IN) {
            $(this).attr("disabled", "disabled");
        }

        $btnZoomOut.removeAttr("disabled");
        $rangePicker.dispatchEvent(rangepickerEvent);
    });

    $btnZoomOut.on('click', function() {

        const [begin, end, delta, halfZoomIn] = calculateHalfZoomIn();

        const newBegin = moment(begin.unix() - halfZoomIn, 'X');
        const newEnd = moment(end.unix() + halfZoomIn, 'X');

        $inputBeginEpoch.datetimepicker('date', newBegin);
        $inputEndEpoch.datetimepicker('date', newEnd);

        // if delta is lower than 5 minutes then disable the zoom in button
        if (delta > MAX_ZOOM_OUT) {
            $(this).attr("disabled", "disabled");
        }

        $btnZoomIn.removeAttr("disabled");
        $rangePicker.dispatchEvent(rangepickerEvent);
    });

	/* Autoselect the 'custom' dropdown entry when clicking any of the buttons */
	$.each([$btnApply, $btnJumpTimeBack, $btnJumpTimeAhead], function(idx, btn) {
	    $(btn).on('click', function() {
		highlightCustomPresetButton();
		$rangePicker.dispatchEvent(rangepickerEvent);
        });
	});

    $inputBeginEpoch.on("change.datetimepicker", function (e) {
        
        const newBegin = e.date;
        const currentEnd = $inputEndEpoch.datetimepicker('date');
        
        // if the begin date is wrong disable the range picker buttons 
        if (newBegin.isAfter(currentEnd)) {
            disableRangePickerButtons();
            highlightWrongDate();
        }
        else {
            enableRangePickerButtons();
            disableWrongDate();
        }
    });

    $inputEndEpoch.on("change.datetimepicker", function (e) {
        
        const newEnd = e.date;
        const currentBegin = $inputBeginEpoch.datetimepicker('date');
        
        // if the end date is wrong disable the range picker buttons 
        if (newEnd.isBefore(currentBegin)) {
            disableRangePickerButtons();
            highlightWrongDate();
        }
        else {
            enableRangePickerButtons();
            disableWrongDate();
        }
    });


}); /* $(document).ready() */


    function getTimestampRange(updateDatetimeUsingPresets = false) {
        let begin = 0;
        let end = 0;
        const selectTimePresets = $(`#select-time-presets`).val();

        if(updateDatetimeUsingPresets && selectTimePresets) {
            // getting the current time using presets
            const [subtract, measure] = selectTimePresets.split(',');
            const now = moment();
            const diff = moment().subtract(parseInt(subtract), measure);

            begin = diff;
            end = now;

            if(!measure)
                diff = moment(parseInt(subtract));

            // update the datetimepickers
            $inputEndEpoch.datetimepicker('minDate', diff);
            $inputEndEpoch.datetimepicker('maxDate', now);

            $inputEndEpoch.datetimepicker('date', now);
            $inputBeginEpoch.datetimepicker('date', diff);
        } else {
            if(document.getElementById('begin-epoch') && $(`#begin-epoch`)[0].value !== "") 
                begin = $(`#begin-epoch`).datetimepicker('date').utc().unix();
            else
                begin = new Date(Number(datasourceParams.epoch_begin)).getTime();   

            if(document.getElementById('end-epoch') && $(`#end-epoch`)[0].value !== "")   
                end = $(`#end-epoch`).datetimepicker('date').utc().unix();
            else
                end = new Date(Number(datasourceParams.epoch_end)).getTime();
        }
        return [begin, end];
    }

    function getSearchParams() {
        const searchParams = new URLSearchParams();

        // get all filters tags
        const tags = tagify.getTagElms();

        // add the tag filters inside the search params object
        for (const tag of tags) {
            const tagData = tagify.tagData(tag);

            const key = tagData.key;
            const selectedOperator = tagData.selectedOperator;
            const realValue = tagData.realValue;
            const value = tagData.value;

            let param_value = `${realValue || value}{{ opsep }}${selectedOperator || 'eq'}`;
            if (searchParams.get(key)) {
                param_value = `${searchParams.get(key)},${param_value}`;
            }

            searchParams.set(key, param_value);
        }

        {% if query_presets ~= nil and query_presets ~= {} then %}
        // add selected query preset
        searchParams.set('query_preset', $(`#select-query-presets`).val());
        {% end %}

        return searchParams;
    }

    function setDatasourceParams() {
        const searchParams = getSearchParams();
        let changedTime = false;

        searchParams.forEach(function(value, key) {
            datasourceParams[key] = value;
        });

        let [begin, end] = getTimestampRange();
        if (begin == null && end == null) return datasourceParams, changedTime;
        if (datasourceParams.epoch_begin != begin || datasourceParams.epoch_end != end) changedTime = true;
        // override the existing timestamps 
        if (datasourceParams.epoch_begin) datasourceParams.epoch_begin = begin; 
        if (datasourceParams.epoch_end  ) datasourceParams.epoch_end   = end;

        return datasourceParams, changedTime;
    }

    function updateNavbarLink(url, begin, end, element) {
        const searchParams = getSearchParams();

        searchParams.set('epoch_begin', begin);
        searchParams.set('epoch_end', end);
        
        if (url.searchParams.has('status')) {
            searchParams.set('status', url.searchParams.get('status'));
        }

        /* Read the current href */
        const cur_href = $(element).attr('href');
        let cur_url = new URL(cur_href, location.origin);
        /* Read current href params and extract the page name */
        const cur_page = cur_url.searchParams.get('page');
        if(cur_page) {
            /* Prepare the new URL which is the page name extracted plus all other params */
            searchParams.set('page', cur_page);
            searchParams.delete('alert_id');
            cur_url.search = searchParams.toString();
            /* Attach the new URL to the current href */
            $(element).attr('href', cur_url.toString());
        }
    }

    function updateStatusSwitchLink(begin, end, element) {
        const cur_href = $(element).attr('href');
        let cur_url = new URL(cur_href, location.origin + location.pathname);
        let searchParams = new URLSearchParams(cur_url.search);

        /* Set updated epoch */
        searchParams.set('epoch_begin', begin);
        searchParams.set('epoch_end',   end);

        /* Attach the new URL to the current href */
        cur_url.search = searchParams.toString();
        $(element).attr('href', cur_url.toString());
    }

    function pushNewHistoryState(begin, end, len, dontUpdateNavBar, changedTime) {
        const url = new URL(location);
        const searchParams = getSearchParams();
        searchParams.set('epoch_begin', begin);
        searchParams.set('epoch_end', end);

        if (url.searchParams.has('status')) {
            searchParams.set('status', url.searchParams.get('status'));
        }

        /*
          Update navbar items, e.g., alert entities, with begin/end epochs
          and status to preserve them when switching between tabs
         */
        if(dontUpdateNavBar == undefined || dontUpdateNavBar == false) {
            $('#navbarNav a').each(function(index, element) {
                updateNavbarLink(url, begin, end, element);
            });
        }

        /*
          Update status switch items (Engaged, Acknoledged, Past)
          with begin/end epochs to preserve them when switching status
         */
        $('#statusSwitch a').each(function(index, element) {
            updateStatusSwitchLink(begin, end, element);
        });

        /*
          Other page params are not preserved when switching tabs as they may be not valid across
          multiple entities
         */
        searchParams.delete('page');
        if (url.searchParams.has('page')) {
            searchParams.set('page', url.searchParams.get('page'));
        }

        url.search = searchParams.toString();
        window.history.pushState({epoch_begin: begin, epoch_end: end}, '', url);

        if (changedTime === true && !{{ dont_refresh_full_page or false }}) {
            window.location.reload();
        }
    }

    async function onRangePickerChange(pushHistroy = false, updateDatetimeUsingPresets = false) {
        const [begin, end] = getTimestampRange(updateDatetimeUsingPresets);
        let changedTime = false;
        datasourceParams, changedTime = setDatasourceParams();

	{% if query_presets ~= nil and query_presets ~= {} then %}
	if (currentQueryPresets != $(`#select-query-presets`).val()) {
	    pushNewHistoryState(begin, end);
	    /* Reload the page to change datatable columns */
        location.reload();
	    return;
	}
	{% end %}
        if (pushHistroy) {
            pushNewHistoryState(begin, end, null, {{ dont_update_navbar or 'false' }}, changedTime);
        }
        /* The reloadTable callback should be defined by the page (e.g. datatable.template) 
         * to update the content on range or filters update (TODO define a cleaner API for this) */
        if (typeof $table !== 'undefined') {
            await reloadTable($table, begin, end);
        }
    }

    async function addFilterTag(tag) {
        /* Convert values to string (this avoids issues e.g. with 0) */
        if (typeof tag.realValue == 'number') { tag.realValue = ''+tag.realValue; }
        if (typeof tag.value == 'number') { tag.value = ''+tag.value; }

        const existingTagElms = tagify.getTagElms();
        
        /* Lookup by key, value and operator (do not add the same key+value multiple times) */
        let existingTagElement = existingTagElms.find(htmlTag => htmlTag.getAttribute('key') === tag.key && htmlTag.getAttribute('realValue') === tag.realValue && htmlTag.getAttribute('selectedOperator') === tag.selectedOperator);
        let existingTag = tagify.tagData(existingTagElement);
        if (existingTag !== undefined) {
            return;
        }

        /* Lookup by key (does not allow dup, replace the value if key is the same) */
        //existingTagElement = existingTagElms.find(htmlTag => htmlTag.getAttribute('key') === tag.key);
        //const existingTag = tagify.tagData(existingTagElement);
        //if (existingTag !== undefined) {

            
        /* Lookup by index (allow key dup, replace the value only if it's the same element index) */
        if (tag.index && existingTagElms.length > tag.index) {
            existingTagElement = existingTagElms[tag.index] || existingTagElms.find(htmlTag => htmlTag.getAttribute('key') === tag.key && htmlTag.getAttribute('selectedOperator') === tag.selectedOperator);
            existingTag = tagify.tagData(existingTagElement);

            // replace the tag!
            existingTag.value = tag.value;
            existingTag.realValue = tag.realValue;
            if (tag.selectedOperator) {
                existingTag.selectedOperator = tag.selectedOperator;
            }

            tagify.replaceTag(existingTagElement, existingTag);

            // update the datasource params
            await onRangePickerChange(true, false);

            return;
        } 

        // has the tag an operator object?
        if (DEFINED_TAGS[tag.key] && !Array.isArray(DEFINED_TAGS[tag.key])) {
            tag.operators = DEFINED_TAGS[tag.key].operators;
        }

        if (!tag.selectedOperator) {
            tag.selectedOperator = 'eq';
        }

        // add filter!
        tagify.addTags([tag]);
    }

    // on apply button click
    $(`.range-picker`).on('change', async function(e) {
        await onRangePickerChange(true, false);
    });

    $(`#select-len`).on('change', async function() {
        await onRangePickerChange(true, false);
    });

    // when an user remove the tag
    tagify.on('remove', async function(e) {
        const key = e.detail.data.key;

        if (key === undefined) {
            return;
        }

        if (datasourceParams[key] !== undefined) {
            delete datasourceParams[key];
        }

        await onRangePickerChange(true, false);

        // This is done because if no table is present in the page then 
        // the page is not reloaded when removing a tag
        {% if reload_when_removing then %}
            window.location.reload();
        {% end %}
    });

    tagify.on('add', async function(e) {

        const detail = e.detail;
        if (detail.data === undefined) { return; }

        const tag = detail.data;

        // let's check if the tag has a key field
        if (!tag.key) {
            tagify.removeTags([e.detail.tag]);
            e.preventDefault();
            e.stopPropagation();
            return;
        }

        // add/update datasource params, default operator `=`
        if (!tag.selectedOperator) tag.selectedOperator = 'eq';

        {% if query_presets ~= nil and query_presets ~= {} then %}
        // When adding tags in a query page switch to the flows page if the tag is not defined in the query filters
        if ($(`#select-query-presets`).val() != "" && !tag.operators /* No DEFINED_TAGS for this */)
            $(`#select-query-presets`).val("");
        {% end %}

        // trigger request
        await onRangePickerChange(true, false);
    });

    // Tag 'click' event handler to open the 'Edit' modal. Note: this prevents
    // inline editing of the tag ('edit:updated' is never called as a consequence)
    tagify.on('click', async function(e) {
        const detail = e.detail;

        if (detail.data === undefined) { return; }
        if (detail.data.key === undefined) {return;}

        const tag = detail.data;

        pageHandle.filterModalShow(true);

        $('#dt-add-filter-modal input[name="index"]').val(detail.index);
        $('#dt-filter-type-select').val(tag.key).change();

        let value = tag.realValue || tag.value;

        let value_select = $('#dt-add-filter-modal select[name="value"]');
        if (value_select) {
            value_select.val(value);
        }

        let value_input = $('#dt-add-filter-modal input[name="value"]');
        if (value_input) {
            value_input.val(value);
        }

        let operator_select = $('#dt-add-filter-modal select[name="operator"]');

        if (operator_select) {
            operator_select.val(tag.selectedOperator);
        }
    });

    tagify.on('edit:updated', async function(e) {
        const detail = e.detail;

        if (detail.data === undefined) { return; }
        if (detail.data.key === undefined) {return;}

        const tag = detail.data;
        const prevTag = detail.previousData;

        tag.realValue = tag.value;

        // trigger request
        await onRangePickerChange(true, false);
    });

    $(`tags`).on('change', 'select.operator', async function(e) {
        // update the tag and the operator
        const $tag = $(this).parents('tag');
        const tagData = tagify.tagData($tag[0]);
        const selectedOperator = $(this).val();

        $tag.attr("selectedoperator", selectedOperator);

        tagData.selectedOperator = selectedOperator;

        // trigger request
        await onRangePickerChange(true, false);
    });

    $(".btn-remove-tags").on('click', async function() {
        // clear all the filters on click

        const tags = tagify.getTagElms();
        for (const tag of tags) {
            const key = tag.getAttribute('key');
            if (datasourceParams[key]) {
                delete datasourceParams[key];
            }
        }

        tagify.removeAllTags();

        await onRangePickerChange(true, false);
    });

    const addFilter = (e, a, from_table) => {
        e.preventDefault();

        let key = undefined;
        let displayValue = undefined;
        let realValue = undefined;
        let operator = 'eq';

        if (from_table != undefined) {
            const colIndex = from_table.cell(a.parent()).index().column;

            // Read tag key from the column
            key = from_table.column(colIndex).name();

	        // Read tag key from the cell if any
            const data = from_table.cell(a.parent()).data();
            if (data.tag_key)
                key = data.tag_key;

	        // Read value from the cell
            displayValue = (data.label ? data.label : ((data.value != undefined) ? data.value : data));
            displayValue  = NtopUtils.stripTags(displayValue);
            realValue = ((data.value != undefined) ? data.value : data);
        }

        // Read tag key and value from the <a> itself if provided
        if (a.data('tagKey')      != undefined) key          = a.data('tagKey');
        if (a.data('tagLabel')    != undefined) displayValue = a.data('tagLabel');
        if (a.data('tagRealvalue')    != undefined) realValue    = a.data('tagRealvalue');
        else if (a.data('tagValue')    != undefined) realValue    = a.data('tagValue');
        if (a.data('tagOperator') != undefined) operator     = a.data('tagOperator');

        const tag = {
            label: i18n.tags[key],
            key: key,
            value: displayValue,
            realValue: realValue,
            title: realValue,
            selectedOperator: operator
        };

        addFilterTag(tag);
    }

    // when the user navigates using the browser's arrows
    // set the input boxes with their respective values
    $(window).on('popstate', function(e) {
        const {state} = e.originalEvent;
        /* Prevent js error with state === null */
        if(state) {
            const {epoch_begin, epoch_end} = state;    
            $inputBeginEpoch.datetimepicker('date', moment(epoch_begin, 'X'));
            $inputEndEpoch.datetimepicker('date', moment(epoch_end, 'X'));
        }
    });

    /*** Filters modal ***/

    // load data for filters (e.g. alert types in the selected range)
    async function filterModalLoadData() {
        const [begin, end] = getTimestampRange();
        /* Here it is where we can load dynamic data on time range change */
    }

    pageHandle.filterModalShow = function(edit) {
        $('#dt-add-filter-modal-title').text(edit ? "{{i18n('datatable.edit_filter')}}" : "{{i18n('datatable.add_filter')}}");
        $('#dt-add-filter-btn').text(edit ? "{{i18n('apply')}}" : "{{i18n('add')}}");
        $('#dt-filter-type-select').prop( "disabled", edit ? true : false);
        $('#dt-add-filter-modal').modal('show');
        $('#dt-add-filter-modal input[name="index"]').val('');
    }

    const filterModalMakeTag = (formSelector) => {
       const filter_type = $(`${formSelector} [name='filter_type']`).val();

       let tag = {
           key: filter_type,             // e.g. l7_proto 
           label: i18n.tags[filter_type] // e.g. L7 Proto
       }

       let index = $(`${formSelector} input[name='index']`).val();
       if (index) {
           tag.index = index;
       }

       // load filter params inside the template container
       const $inputsTemplate = $(`${formSelector} .dt-filter-template-container [name]`);
       $inputsTemplate.each(function (i, input) {
           if ($(this).attr('name') == 'operator') {
               tag.selectedOperator = $(this).val().trim();
           } else {
               tag.realValue = $(this).val().trim();
               tag.value = $('option:selected', this).data('tagLabel');
               if (!tag.value) tag.value = tag.realValue;
           }
       });

       return tag;
       }

       function filterModalCloneTemplate(type) {
       const template = $(`template#${type}-filter-template`).html();
       // if the template is not empty then return a copy of the template content
       if (template && template.trim() != "") {
           const $template = $(template);
           return $template;
       }
       return (null);
       }

       function filterModalSetContent(container, content) {
       // show the template inside the modal container
       container.hide().empty();

       if (content) {
           container.append($(`<hr>`));
           container.append(content).show();
       }
       }

       const filterModalCreateTemplateOnSelect = (formSelector) => {

       const $templateContainer = $(`${formSelector} .dt-filter-template-container`);

       // on filter type Selection load the right template to fill
       $(`${formSelector} select[name='filter_type']`).change(function (e) {
           const $option = $(this).find(`option[value='${$(this).val()}']`);
           const $cloned = filterModalCloneTemplate($option.data('filterKey'));
           filterModalSetContent($templateContainer, $cloned);
           $(`${formSelector} span.test-feedback`).fadeOut();
       });
       }

    /* bind add filter event */
    $(`#dt-add-filter-modal form`).modalHandler({
        /* Note: no endpoint defined, ajax is not used here */
        resetAfterSubmit: false,
        onModalInit: () => { filterModalCreateTemplateOnSelect(`#dt-add-filter-modal`); },
        onModalShow: () => {
            const $templateContainer = $(`#dt-add-filter-modal form .dt-filter-template-container`);
            // load the template of the selected filter
            const $cloned = filterModalCloneTemplate($(`#dt-add-filter-modal select[name='filter_type'] option:selected`).data('filterKey'));
            filterModalSetContent($templateContainer, $cloned);
        },
        beforeSumbit: () => {
            $(`#dt-add-filter-modal form button[type='submit']`).click(function () {
                $(`#dt-add-filter-modal form span.invalid-feedback`).hide();
            });

            $(`#dt-add-filter-modal .test-feedback`).hide();

            const tag = filterModalMakeTag(`#dt-add-filter-modal form`);

            addFilterTag(tag);

            return {};
        },
        onSubmitSuccess: (response) => {
            // hide modal
            $(`#dt-add-filter-modal`).modal('hide');
            $(`#dt-add-filter-modal form .dt-filter-template-container`).hide();
            return true;
        }
    }).invokeModalInit();

</script>
