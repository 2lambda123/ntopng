{#
    (C) 2021 - ntop.org    
    Base template for datatables.
#}

<link rel="stylesheet" href='{{ ntop.getHttpPrefix() }}/css/apexcharts.css'/>

<script type='text/javascript' src='{{ ntop.getHttpPrefix() }}/js/apexchart/apexcharts.min.js?{{ ntop.getStaticFileEpoch() }}'></script>
<script type='text/javascript' src='{{ ntop.getHttpPrefix() }}/js/widgets/widgets.js?{{ ntop.getStaticFileEpoch() }}'></script>

<div class='row'>
  <div class='col-12'>
    <div class="mb-2">
      {* ui_utils.render_datetime_range_picker(range_picker) *}
    </div>
  </div>
  <div class='col-12'>
    <div class="card card-shadow">
      <div class="overlay justify-content-center align-items-center position-absolute h-100 w-100">
        <div class="text-center">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
        </div>
      </div>

      <div class="card-body">
        <div class="row">

          <div class="col-12" id="ChartDiv" style="padding-right: 2px;padding-left: 2px;">
            <div class="card h-100 overflow-hidden">
              {* widget_gui_utils.render_chart(chart.name, {
              displaying_label = ""
              }) *}
            </div>
          </div>

          {% if show_cards then %}
          <div class="col-2 d-none" id="CardDiv1" style="padding-right: 2px;padding-left: 2px;">
            <div class="card border-primary h-100 mb-2" id="Card1">
              <div class="card-header text-start fs-6 fw-bold" data-bs-custom-class="custom-tooltip" title="Loading..." id="sideCardTitle1"> Loading... </div>
              <div class="card-body ms-1">
                <span class="card-text text-start fs-6" id="sideCard1">Loading...</span>
              </div>
            </div>
          </div>

          <div class="col-2 d-none" id="CardDiv2" style="padding-right: 2px;padding-left: 2px;">
            <div class="card border-success h-100 mb-2" id="Card2">
              <div class="card-header text-start fs-6 fw-bold" data-bs-custom-class="custom-tooltip"  title="Loading..." id="sideCardTitle2"> Loading...</div>
              <div class="card-body ms-1">
                <span class="card-text text-start fs-6" id="sideCard2">Loading...</span>
              </div>
            </div>
          </div>
          {% end  %}

          <table id='{{ datatable.name }}' class='table table-striped table-bordered w-100'>
            <thead>
              {* datatable.table *}
            </thead>
          </table>

          <small id="{{ datatable.name }}-query-time" style="display: none;" class="query">{{ i18n('db_search.query_performed') }} <span class="seconds">{}</span> seconds. <span id="{{ datatable.name }}-query" style="display: none;" class="badge bg-secondary">SQL</span></small>

        </div>
      </div>

      <div class="card-footer">

        {% if show_permalink then %}
        <button id="btn-get-permalink" class="btn btn-secondary">
          <i class="fas fa-link"></i> {{ i18n('graphs.get_permanent_link') }}
        </button>
        {% end %}

        {% if show_download then %}
        <a id="dt-btn-download" download="alerts.txt" class="btn btn-secondary" href="{{ datatable.endpoint_list }}{{ build_query_params(datatable.datasource.params) }}&format=txt">
          <i class="fas fa-file-download"></i> {{ i18n('show_alerts.download_alerts') }}
        </a>
        {% end %}

        {% if show_acknowledge_all then %}
        <button id="dt-btn-acknowledge" {{ ternary(datatable.show_admin_controls, "", 'hidden="hidden"') }} data-bs-target='#dt-acknowledge-modal' data-bs-toggle="modal" class="btn btn-primary">
          <i class="fas fa fa-user-check"></i> {{ i18n("acknowledge_alerts")}}
        </button>
        {% end %}

        {% if show_delete_all then %}
        <button id="dt-btn-delete" {{ ternary(datatable.show_admin_controls, "", 'hidden="hidden"') }} data-bs-target='#dt-delete-modal' data-bs-toggle="modal" class="btn btn-danger">
          <i class="fas fa fa-trash"></i> {{ i18n("delete_alerts")}}
        </button>
        {% end %}

      </div>
    </div>
  </div>
</div>

{# add modals if defined #}
{% if datatable.modals then %}
<div class="modals">
    {% for _, modal in pairs(datatable.modals) do %}
        {* modal *}
    {% end %}
</div>
{% end %}

<link href="{{ ntop.getHttpPrefix() }}/css/dataTables.bootstrap5.min.css" rel="stylesheet"/>
<script type="text/javascript">
    i18n.showing_x_to_y_rows = "{{ i18n('showing_x_to_y_rows', {x='_START_', y='_END_', tot='_TOTAL_'}) }}";
</script>
<script type='text/javascript'>
    let pageStats = {};
    let pageCsrf = "{{ ntop.getRandomCSRFValue() }}";
    let $table;

    $(document).ready(function(){
        const INITIAL_ROWS_LENGTH = {{datatable.initialLength}};
        const FAMILY = "{{ entity }}"

        const MAX_SCORE_VALUE = 250;        
        const datasourceParams = {* json.encode(datatable.datasource.params) *};

        const $inputBeginEpoch = $(`#begin-epoch`);
        const $inputEndEpoch = $(`#end-epoch`);
        const $btnGetPermaLink = $(`#btn-get-permalink`);
        const sideCard = [$('#sideCard1'),$('#sideCard2')];    

        let intervalId;

        $(`#{{ datatable.name }}-query`).click(function(e) {
            NtopUtils.copyToClipboard($(e.target).attr('title'), "{{i18n('db_search.query_copied')}}", "{{i18n('unable_to_copy_to_clickboard')}}");
        })

        /* Show an overlay to hide loading */
        function toggleOverlays(time = 500) {
            $(`.overlay`).toggle(time);
        }

        function showOverlays(time = 500) {
            $(`.overlay`).fadeIn(time);
        }

        function hideOverlays(time = 500) {
            $(`.overlay`).fadeOut(time);
        }

        function getSearchParams() {
            const searchParams = new URLSearchParams();
            // get all filters tags
            const tags = tagify.getTagElms();
            // add the tag filters inside the search params object
            for (const tag of tags) {
                const tagData = tagify.tagData(tag);

                const key = tagData.key;
                const selectedOperator = tagData.selectedOperator;
                const realValue = tagData.realValue;
                const value = tagData.value;

                let param_value = `${realValue || value}{{ opsep }}${selectedOperator || 'eq'}`;
                if (searchParams.get(key)) {
                    param_value = `${searchParams.get(key)},${param_value}`;
                }

                searchParams.set(key, param_value);
            }

            return searchParams;
        }

        function setDatasourceParams() {
            const searchParams = getSearchParams();

            searchParams.forEach(function(value, key) {
                datasourceParams[key] = value;
            });

            const [begin, end] = getTimestampRange();
            if (begin == null && end == null) return datasourceParams;
            // override the existing timestamps 
            if (datasourceParams.epoch_begin) datasourceParams.epoch_begin = begin.unix();
            if (datasourceParams.epoch_end) datasourceParams.epoch_end = end.unix();
            return datasourceParams;
        }

        async function reloadTable($table, ) {
            const searchParams = new URLSearchParams(Object.entries(datasourceParams));

            showOverlays();
            
            // reload the table
            $table.ajax.url(`{* datatable.datasource.name *}?${searchParams.toString()}`).load();
            try {
                WidgetUtils.getWidgetByName("{{ chart.name }}").update(datasourceParams);
            }
            catch(e) {
                console.warn(e);
            }
            {% if show_cards then %}
            updateCardStats();
            {% end %} 
        }

        function printQueryTime($table) {
            const response = $table.ajax.json();
            // if the response contains the query time period
            if (response.rsp.stats !== undefined && response.rsp.stats.query_duration_msec !== undefined) {
                const sec = response.rsp.stats.query_duration_msec / 1000.0;
                $(`#{{ datatable.name }}-query-time`).show();
                $(`#{{ datatable.name }}-query-time .seconds`).text((sec < 0.01) ? '< 0.01' : NtopUtils.ffloat(sec)); // The time is in sec
                $(`#{{ datatable.name }}-query`).show();
                $(`#{{ datatable.name }}-query`).prop('title', response.rsp.stats.query);
            }
        }

        function getTimestampRange(updateDatetimeUsingPresets = false) {
            let begin = 0;
            let end = 0;
            const selectTimePresets = $(`#select-time-presets`).val();

            if(updateDatetimeUsingPresets && selectTimePresets) {
                // getting the current time using presets
                const [subtract, measure] = selectTimePresets.split(',');
                const now = moment();
                const diff = moment().subtract(parseInt(subtract), measure);

                begin = diff;
                end = now;

                if(!measure)
                    diff = moment(parseInt(subtract));

                // update the datetimepickers
                $inputEndEpoch.datetimepicker('minDate', diff);
                $inputEndEpoch.datetimepicker('maxDate', now);

                $inputEndEpoch.datetimepicker('date', now);
                $inputBeginEpoch.datetimepicker('date', diff);
            } else {
                begin = $(`#begin-epoch`).datetimepicker('date').utc();
                end = $(`#end-epoch`).datetimepicker('date').utc();
            }
            return [begin, end];
        }

        function updateNavbarLink(url, begin, end, element) {
            const searchParams = getSearchParams();

            searchParams.set('epoch_begin', begin.unix());
            searchParams.set('epoch_end', end.unix());
            
            if (url.searchParams.has('status')) {
                searchParams.set('status', url.searchParams.get('status'));
            }

            /* Read the current href */
            const cur_href = $(element).attr('href');
            let cur_url = new URL(cur_href, location.origin);
            /* Read current href params and extract the page name */
            const cur_page = cur_url.searchParams.get('page');
            if(cur_page) {
                /* Prepare the new URL which is the page name extracted plus all other params */
                searchParams.set('page', cur_page);
                searchParams.delete('alert_id');
                cur_url.search = searchParams.toString();
                /* Attach the new URL to the current href */
                $(element).attr('href', cur_url.toString());
            }
        }

        function updateStatusSwitchLink(begin, end, element) {
            const cur_href = $(element).attr('href');
            let cur_url = new URL(cur_href, location.origin + location.pathname);
            let searchParams = new URLSearchParams(cur_url.search);

            /* Set updated epoch */
            searchParams.set('epoch_begin', begin.unix());
            searchParams.set('epoch_end',   end.unix());

            /* Attach the new URL to the current href */
            cur_url.search = searchParams.toString();
            $(element).attr('href', cur_url.toString());
        }

        function pushNewHistoryState(begin, end, len) {
            const url = new URL(location);

            const searchParams = getSearchParams();
            searchParams.set('epoch_begin', begin.unix());
            searchParams.set('epoch_end', end.unix());

            if (url.searchParams.has('status')) {
                searchParams.set('status', url.searchParams.get('status'));
            }

            /*
              Update navbar items, e.g., alert entities, with begin/end epochs
              and status to preserve them when switching between tabs
             */
            $('#navbarNav a').each(function(index, element) {
                updateNavbarLink(url, begin, end, element);
            });

            /*
              Update status switch items (Engaged, Acknoledged, Past)
              with begin/end epochs to preserve them when switching status
             */
            $('#statusSwitch a').each(function(index, element) {
                updateStatusSwitchLink(begin, end, element);
            });

            /*
              Other page params are not preserved when switching tabs as they may be not valid across
              multiple entities
             */
            searchParams.delete('page');
            if (url.searchParams.has('page')) {
                searchParams.set('page', url.searchParams.get('page'));
            }

            url.search = searchParams.toString();
            window.history.pushState({epoch_begin: begin.unix(), epoch_end: end.unix()}, '', url);
        }

        async function onRangePickerChange(pushHistroy = false, updateDatetimeUsingPresets = false) {
            const [begin, end] = getTimestampRange(updateDatetimeUsingPresets);
            setDatasourceParams();

            await reloadTable($table);

            // update the link of the download button
            const href = $(`#dt-btn-download`).attr('href');
            const newDownloadURL = new URL(href, location.origin);
            newDownloadURL.search = new URLSearchParams(datasourceParams);
            newDownloadURL.searchParams.set('format', 'txt');

            $(`#dt-btn-download`).attr('href', newDownloadURL.toString());

            if (pushHistroy) {
                pushNewHistoryState(begin, end, null);
            }
        }

        async function addFilterTag(tag) {
            /* Convert values to string (this avoids issues e.g. with 0) */
            if (typeof tag.realValue == 'number') { tag.realValue = ''+tag.realValue; }
            if (typeof tag.value == 'number') { tag.value = ''+tag.value; }

            const existingTagElms = tagify.getTagElms();
            
            /* Lookup by key, value and operator (do not add the same key+value multiple times) */
            let existingTagElement = existingTagElms.find(htmlTag => htmlTag.getAttribute('key') === tag.key && htmlTag.getAttribute('realValue') === tag.realValue && htmlTag.getAttribute('selectedOperator') === tag.selectedOperator);
            let existingTag = tagify.tagData(existingTagElement);
            if (existingTag !== undefined) {
                return;
            }

            /*
                //Lookup by key (does not allow dup, replace the value if key is the same)
                const existingTagElement = existingTagElms.find(htmlTag => htmlTag.getAttribute('key') === tag.key);
                const existingTag = tagify.tagData(existingTagElement);
                if (existingTag !== undefined) {
            */ 

            existingTagElement = existingTagElms[tag.index] || existingTagElms.find(htmlTag => htmlTag.getAttribute('key') === tag.key && htmlTag.getAttribute('selectedOperator') === tag.selectedOperator);
                
            /* Lookup by index (allow key dup, replace the value only if it's the same element index) */
            if ((tag.index && existingTagElms.length > tag.index)) {
                existingTag = tagify.tagData(existingTagElement);

                // replace the tag!
                existingTag.value = tag.value;
                existingTag.realValue = tag.realValue;
                if (tag.selectedOperator) {
                    existingTag.selectedOperator = tag.selectedOperator;
                }

                tagify.replaceTag(existingTagElement, existingTag);

                // update the datasource params
                await onRangePickerChange(true);

                return;
            } 

            // has the tag an operator object?
            if (!Array.isArray(DEFINED_TAGS[tag.key])) {
                tag.operators = DEFINED_TAGS[tag.key].operators;
            }

            if (!tag.selectedOperator) {
                tag.selectedOperator = 'eq';
            }

            // add filter!
            tagify.addTags([tag]);
        }

        function loadColumns() {

            let columns = [];
            {% if datatable.js_columns then %}
                columns = {* datatable.js_columns *};
            {% end %}

            /* Actions Column */
            {% if show_actions then %}
            columns.push({responsivePriority: 1, width: '5%', targets: -1, className: 'text-center text-nowrap', orderable: false, data: null, render: (_, type, dataRow) => {
                const buttons = [
                    {% if actions.show_settings then %}
                    {icon: 'fa fa-cog', title: "{{ i18n('settings') }}", href: '#check_settings', class: 'btn-primary'},
                    {% end %}

                    {% if actions.show_flows then %}
                    /* Button to jump to flow alerts within the same time period */
                    {icon: 'fa-stream', title: "{{ i18n('flows') }}", modal: '#flow_alerts', class: "btn-info"},
		    {% end %}

                    {% if actions.show_historical then %}
		    /* Button to jump to historical nIndex flows */
                          {icon: 'fa-search-plus', title: "{{ i18n('db_explorer.historical_data_explorer') }}", modal: '#past_flows', class: "btn-info"},
		    {% end %}

                    {% if actions.show_disable then %}
                    /* Bell button to disable alerts is only supported for hosts and flows */
                    {icon: 'fa-bell-slash', title: "{{ i18n('disable') }}", modal: '#alerts_filter_dialog', class: "btn-warning"},
                    {% end %}

                    {% if actions.show_acknowledge then %}
                    {icon: 'fa fa-user-check', title: "{{ i18n('acknowledge') }}", modal: '#acknowledge_alert_dialog', class: 'btn-primary'},
                    {% end %}

                    {% if actions.show_delete then %}
                    {icon: 'fa fa-trash', title: "{{ i18n('remove') }}", modal: '#delete_alert_dialog', class: 'btn-danger'},
                    {% end %}
                ];

                return DataTableUtils.createActionButtons(buttons);
            }});
            {% end %}

            return columns;
        }

        const datatableButton = {* (datatable.buttons or '[]') *};
        datatableButton.push({
            text: '<i class="fas fa-sync"></i>',
            action: async function (e, dt, node, config) {
                await onRangePickerChange();
            }
        });
        
        const columns = loadColumns();
        const column_order_name = "{{ datatable.cached_column }}";
        let column_order_id = 0;
        columns.forEach((element, index) => {
            if(element.data && element.data == column_order_name) {
                column_order_id = index;
            }
        });

        let config = DataTableUtils.getStdDatatableConfig(datatableButton);
        config = DataTableUtils.extendConfig(config, {
            serverSide: true,
            searching: false,
            order: [[ column_order_id, "{* datatable.cached_sorting *}" ]],
            ajax: {
                method: 'get',
                url: '{* datatable.datasource.endpoint *}',
                dataSrc: 'rsp.records',
                data: (data, settings) => {
                    const tableApi = settings.oInstance.api();
                    const orderColumnIndex = data.order[0].column;
                    const orderColumnName = tableApi.column(orderColumnIndex).name() || undefined;
                    
                    if (data.order) {
                        data.order = data.order[0].dir;
                        data.sort = orderColumnName;
                    }

                    delete data.columns;
                    delete data.search;
                   
                    // create visibleColumns field
                    const visibleColumns = [];
                    tableApi.columns().every(function(idx) {
                        
                        const $column = tableApi.column(idx);
                        if ($column.visible() && $column.name() !== '') {
                            visibleColumns.push($column.name());
                        } 
                    });

                    data.visible_columns = visibleColumns.join(',');

                    return data;
                }
            },
            lengthMenu: [10, 20, 50, 100, 200],
            pageLength: INITIAL_ROWS_LENGTH,
            columns: loadColumns(),
        });

        {% if (datatable.refresh_rate) and (datatable.refresh_rate > 0) then %}
            intervalId = setInterval(function() { onRangePickerChange(true, true); }, {{ datatable.refresh_rate }});
        {% end %}

        $table = $(`#{{ datatable.name }}`).DataTable(config);

        DataTableUtils.addToggleColumnsDropdown($table, function(col, visible) {
            $table.ajax.reload();
        });

        // on ajax request
        $table.on('preXhr', function() {
        });

        // on ajax request complete then print the query time
        $table.on('xhr', function() {
            printQueryTime($table);
            hideOverlays();
            filterModalLoadData();
        });

        $(`.range-picker`).on('change', async function(e) {
            await onRangePickerChange(true);
        });

        // when an user remove the tag
        tagify.on('remove', async function(e) {
            const key = e.detail.data.key;
            if (key === undefined) {
                return;
            }
            if (datasourceParams[key] !== undefined) {
                delete datasourceParams[key];
            }

            await onRangePickerChange(true);
        });

        tagify.on('add', async function(e) {

            const detail = e.detail;
            if (detail.data === undefined) { return; }

            // let's check if the tag has a key field
            if (!detail.data.key) {
                tagify.removeTags([e.detail.tag]);
                e.preventDefault();
                e.stopPropagation();
                return;
            }

            const tag = detail.data;

            // trigger request
            await onRangePickerChange(true);
        });

        // Tag 'click' event handler to open the 'Edit' modal. Note: this prevents
        // inline editing of the tag ('edit:updated' is never called as a consequence)
        tagify.on('click', async function(e) {
            const detail = e.detail;

            if (detail.data === undefined) { return; }
            if (detail.data.key === undefined) {return;}

            const tag = detail.data;

            pageStats.filterModalShow(true);

            $('#dt-add-filter-modal input[name="index"]').val(detail.index);
            $('#dt-filter-type-select').val(tag.key).change();

            let value = tag.realValue || tag.value;

            let value_select = $('#dt-add-filter-modal select[name="value"]');
            if (value_select) {
                value_select.val(value);
            }

            let value_input = $('#dt-add-filter-modal input[name="value"]');
            if (value_input) {
                value_input.val(value);
            }

            let operator_select = $('#dt-add-filter-modal select[name="operator"]');
            if (operator_select) {
                operator_select.val(tag.selectedOperator);
            }
        });

        tagify.on('edit:updated', async function(e) {
        
            const detail = e.detail;
            if (detail.data === undefined) { return; }
            if (detail.data.key === undefined) {return;}

            const tag = detail.data;
            const prevTag = detail.previousData;

            tag.realValue = tag.value;

            // trigger request
            await onRangePickerChange(true);
        });

        $(`tags`).on('change', 'select.operator', async function(e) {
            // update the tag and the operator
            const $tag = $(this).parents('tag');
            const tagData = tagify.tagData($tag[0]);
            const selectedOperator = $(this).val();

            $tag.attr("selectedoperator", selectedOperator);

            tagData.selectedOperator = selectedOperator;

            // trigger request
            await onRangePickerChange(true);
        });

        // clear all the filters on click
        $(".btn-remove-tags").on('click', async function() {

            const tags = tagify.getTagElms();
            for (const tag of tags) {
                const key = tag.getAttribute('key');
                if (datasourceParams[key]) {
                    delete datasourceParams[key];
                }
            }

            tagify.removeAllTags();

            await onRangePickerChange(true);
        });


        const addFilter = (e, tmp) => {
            e.preventDefault();
    
            // Getting the row data
            const key = tmp.data('tagKey');
            const label = tmp.data('tagLabel');
            const value = tmp.data('tagValue');
            const operator = tmp.data('tagOperator') || 'eq';
            const tagTitle = i18n.tags[key];
            
            
            const tag = { label: tagTitle, key: key, value: label, realValue: value, title: value, selectedOperator: operator};

            addFilterTag(tag);
        }

        $table.on('click', `a.tag-filter`, async function (e) {
            addFilter(e, $(this));
        });

        /* Cards */
        {% if show_cards then %}

        sideCard.forEach(element=>{
            const card = "#".concat(element[0].id);
            
            $(card).on('click', `a.tag-filter`, async function (e) {
                addFilter(e, $(this));
            })
        })

        {% end %}
        
        // when the user navigates using the browser's arrows
        // set the input boxes with their respective values
        $(window).on('popstate', function(e) {
            const {state} = e.originalEvent;
            const {epoch_begin, epoch_end} = state;    
            $inputBeginEpoch.datetimepicker('date', moment(epoch_begin, 'X'));
            $inputEndEpoch.datetimepicker('date', moment(epoch_end, 'X'));
        });

        $btnGetPermaLink.on('click', function() {

            const $this = $(this);
            
            const dummyInput = document.createElement('input');
            dummyInput.value = location.href;
            document.body.appendChild(dummyInput);
            dummyInput.select();

            // copy the url to the clipboard from the dummy input
            document.execCommand("copy");
            document.body.removeChild(dummyInput);

            $this.attr("title", "Copied!")
                .tooltip("dispose")
                .tooltip()
                .tooltip("show");
        });

        ChartWidget.registerEventCallback("{{ chart.name }}", 'zoomed', async (chartContext, { xaxis, yaxis }) => {
           
            // the timestamps are in milliseconds, convert them into seconds
            const begin = moment(xaxis.min);
            const end = moment(xaxis.max);

            $(`#select-time-presets`).val('custom');

            $inputBeginEpoch.datetimepicker('date', begin);
            $inputEndEpoch.datetimepicker('date', end);

            await onRangePickerChange(true);
        });


        /*** Filters modal ***/

        // load data for filters (e.g. alert types in the selected range)
        async function filterModalLoadData() {
            const [begin, end] = getTimestampRange();

            /* Here it is where we can load dynamic data on time range change */
        }

        pageStats.filterModalShow = function(edit) {
            $('#dt-add-filter-modal-title').text(edit ? "{{i18n('datatable.edit_filter')}}" : "{{i18n('datatable.add_filter')}}");
            $('#dt-add-filter-btn').text(edit ? "{{i18n('apply')}}" : "{{i18n('add')}}");
            $('#dt-filter-type-select').prop( "disabled", edit ? true : false);
            $('#dt-add-filter-modal').modal('show');
            $('#dt-add-filter-modal input[name="index"]').val('');
        }

        const filterModalMakeTag = (formSelector) => {
           const filter_type = $(`${formSelector} [name='filter_type']`).val();

           let tag = {
               key: filter_type,             // e.g. l7_proto 
               label: i18n.tags[filter_type] // e.g. L7 Proto
           }

           let index = $(`${formSelector} input[name='index']`).val();
           if (index) {
               tag.index = index;
           }

           // load filter params inside the template container
           const $inputsTemplate = $(`${formSelector} .dt-filter-template-container [name]`);
           $inputsTemplate.each(function (i, input) {
               if ($(this).attr('name') == 'operator') {
                   tag.selectedOperator = $(this).val().trim();
               } else {
                   tag.realValue = $(this).val().trim();
                   tag.value = $('option:selected', this).data('tagLabel');
                   if (!tag.value) tag.value = tag.realValue;
               }
           });

           return tag;
       }

       function filterModalCloneTemplate(type) {
           const template = $(`template#${type}-filter-template`).html();
           // if the template is not empty then return a copy of the template content
           if (template && template.trim() != "") {
               const $template = $(template);
               return $template;
           }
           return (null);
       }

       const filterModalCreateTemplateOnSelect = (formSelector) => {

           const $templateContainer = $(`${formSelector} .dt-filter-template-container`);

           // on filter type Selection load the right template to fill
           $(`${formSelector} select[name='filter_type']`).change(function (e) {
               const $option = $(this).find(`option[value='${$(this).val()}']`);
               const $cloned = filterModalCloneTemplate($option.data('filterKey'));
               // show the template inside the modal container
               $templateContainer.hide().empty();
               if ($cloned) {
                   $templateContainer.append($(`<hr>`));
                   $templateContainer.append($cloned).show();
               }
               $(`${formSelector} span.test-feedback`).fadeOut();
           });
       }

        /* bind add filter event */
        $(`#dt-add-filter-modal form`).modalHandler({
            /* Note: no endpoint defined, ajax is not used here */
            resetAfterSubmit: false,
            onModalInit: () => { filterModalCreateTemplateOnSelect(`#dt-add-filter-modal`); },
            onModalShow: () => {
                // load the template of the selected filter
                const $cloned = filterModalCloneTemplate($(`#dt-add-filter-modal select[name='filter_type'] option:selected`).data('filterKey'));
                if ($cloned) {
                    $(`#dt-add-filter-modal form .dt-filter-template-container`).empty().append($(`<hr>`), $cloned).show();
                }
            },
            beforeSumbit: () => {
                $(`#dt-add-filter-modal form button[type='submit']`).click(function () {
                    $(`#dt-add-filter-modal form span.invalid-feedback`).hide();
                });

                $(`#dt-add-filter-modal .test-feedback`).hide();

                const tag = filterModalMakeTag(`#dt-add-filter-modal form`);

                addFilterTag(tag);

                return {};
            },
            onSubmitSuccess: (response) => {
                // hide modal
                $(`#dt-add-filter-modal`).modal('hide');
                $(`#dt-add-filter-modal form .dt-filter-template-container`).hide();
                return true;
            }
        }).invokeModalInit();

        /* Cards */
        {% if show_cards then %}
        
        const [epoch_begin, epoch_end] = getTimestampRange();
        let updateCardStats = () => {
            let entity = "{{ entity }}"
            entity = entity.replace("_", "/")
            let params = (new URLSearchParams(datasourceParams)).toString();

            $.getJSON(`{* endpoint_cards *}?${params}`, function (data) {

                let chartBox = $('#ChartDiv')
                let divBox = [$('#CardDiv1'),$('#CardDiv2')];
                let cardBox = [$('#Card1'),$('#Card2')];
                let sideCardTitle = [$('#sideCardTitle1'),$('#sideCardTitle2')];
                let numCards = 0;

                for(i=0;i<sideCard.length;i++){
                    if(data.rsp[i] == undefined){
                        divBox[i].attr({
                                "class" : "col-2 d-none"
                        });
                    }else{
                        sideCardTitle[i].html(data.rsp[i].label);
                        sideCardTitle[i].attr({
                            "title" : data.rsp[i].tooltip                
                        });
                        let cardText = "";
                        for(j=0;j<3;j++){
                            // Concat the name with the percentage of the stat
                            // NB: These name should be filters if available
                            if(data.rsp[i].value[0].lenght != 0 && data.rsp[i].value[0][j] != undefined){
                                let restText = " (" + (data.rsp[i].value[0][j].count).toFixed(1) + "%)</li>";
                                if(data.rsp[i].value[0][j].count != 0 && data.rsp[i].value[0][j].count < 0.1){restText = " (< 0.1%)</li>";}
                                cardText += "<li>" + data.rsp[i].value[0][j].name + restText;
                            }                           
                        }
                        if(cardText != ""){
                                divBox[i].attr({
                                        "class" : "col-2 mb-2"
                                });
                            sideCard[i].html("<small>" + cardText + "</small>");
                            numCards += 1;
                        }else{
                                divBox[i].attr({
                                        "class" : "col-2 d-none"
                                });
                        }
                    }
                }

                // Calculating the width of the graph: Tot width (12) - Num of cards (2 per card)
                graphWidth = (12 - (numCards * 2)).toString();

                chartBox.attr({
                    "class" : "col-" + graphWidth + " mb-2"
                });
            });
        }

        updateCardStats();
        
        {% end %}

        /* HTTP copy URL button */
        $table.on('click', `#copyHttpUrl`, function (e) {
            let sampleTextarea = document.createElement("textarea");
            document.body.appendChild(sampleTextarea);
            sampleTextarea.value = this.parentElement.getElementsByTagName('a')[0].href; //url
            sampleTextarea.select(); //select textarea content
            document.execCommand("copy");
            document.body.removeChild(sampleTextarea);
        });

        /* Auto-refresh handling */
        $(`#autoRefreshEnabled`).on('click', async function(e) {
            const enabled_disabled = ($(`#autoRefreshIcon`).hasClass('fa-spin') == false);
            const auto_refresh_url = '{{ ntop.getHttpPrefix() }}/lua/rest/v2/set/checks/auto_refresh.lua' 

            $.post(auto_refresh_url, {
                ifid: {{ ifid }},
                alert_page_refresh_rate_enabled: enabled_disabled,
                csrf: pageCsrf,
            })  
            .done(function(rsp) {
                if(enabled_disabled) {
                    if (rsp.rsp.refresh_rate > 0 && !intervalId) {
                        intervalId = setInterval(function() { onRangePickerChange(true, true); }, rsp.rsp.refresh_rate);
                        $(`#autoRefreshIcon`).addClass('fa-spin');
                    }
                }
                else {
                    clearInterval(intervalId);
                    intervalId = null;
                    $(`#autoRefreshIcon`).removeClass('fa-spin');
                }
            })
        });

        {* template_utils.gen(extra_js, extra_js_context) *}

});
</script>
